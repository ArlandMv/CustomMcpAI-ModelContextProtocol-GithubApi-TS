import {
  McpServer,
  ResourceTemplate,
} from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { z } from 'zod';
import { GitHubClient } from './github-client.js';

// Initialize the GitHub client
const github = new GitHubClient();

async function main() {
  // Initialize the GitHub client
  await github.initialize();

  // Create a new MCP server
  const server = new McpServer({
    name: 'GitHub Repository Explorer',
    version: '1.0.0',
  });

  // List repositories resource
  server.resource('list-repositories', 'github://repositories', async (uri) => {
    const repos = await github.listRepositories();
    return {
      contents: [
        {
          uri: uri.href,
          text: JSON.stringify(repos, null, 2),
        },
      ],
    };
  });

  // Get repository details resource
  server.resource(
    'repository-details',
    new ResourceTemplate('github://repository/{repo}', { list: undefined }),
    async (uri, { repo }) => {
      const repoDetails = await github.getRepository(repo);
      return {
        contents: [
          {
            uri: uri.href,
            text: JSON.stringify(repoDetails, null, 2),
          },
        ],
      };
    }
  );

  // List files in repository resource
  server.resource(
    'list-files',
    new ResourceTemplate('github://repository/{repo}/files', {
      list: undefined,
    }),
    async (uri, { repo }) => {
      const files = await github.listFiles(repo);
      return {
        contents: [
          {
            uri: uri.href,
            text: JSON.stringify(files, null, 2),
          },
        ],
      };
    }
  );

  // List files in a specific directory resource
  server.resource(
    'list-directory',
    new ResourceTemplate('github://repository/{repo}/directory/{path}', {
      list: undefined,
    }),
    async (uri, { repo, path }) => {
      const files = await github.listFiles(repo, path);
      return {
        contents: [
          {
            uri: uri.href,
            text: JSON.stringify(files, null, 2),
          },
        ],
      };
    }
  );

  // Get file content resource
  server.resource(
    'file-content',
    new ResourceTemplate('github://repository/{repo}/file/{*filePath}', {
      list: undefined,
    }),
    async (uri, { repo, filePath }) => {
      const content = await github.getFileContent(repo, filePath);
      return {
        contents: [
          {
            uri: uri.href,
            text: content,
          },
        ],
      };
    }
  );

  // Tool to search for files in a repository
  server.tool(
    'search-files',
    {
      repo: z.string(),
      query: z.string(),
      branch: z.string().optional(),
    },
    async ({ repo, query, branch }) => {
      try {
        // List all files in the repository
        const allFiles = await listAllFiles(repo, branch || 'main');

        // Filter files that match the query
        const matchingFiles = allFiles.filter((file) =>
          file.name.toLowerCase().includes(query.toLowerCase())
        );

        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify(matchingFiles, null, 2),
            },
          ],
        };
      } catch (error) {
        return {
          content: [
            {
              type: 'text',
              text: `Error searching files: ${error}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  // Tool to get repository statistics
  server.tool('repo-stats', { repo: z.string() }, async ({ repo }) => {
    try {
      const repoDetails = await github.getRepository(repo);
      const files = await listAllFiles(repo);

      // Count files by type
      const fileTypes: Record<string, number> = {};
      files.forEach((file) => {
        const extension = file.name.includes('.')
          ? file.name.split('.').pop() || 'unknown'
          : 'no-extension';

        fileTypes[extension] = (fileTypes[extension] || 0) + 1;
      });

      const stats = {
        name: repoDetails.name,
        description: repoDetails.description,
        isPrivate: repoDetails.private,
        defaultBranch: repoDetails.default_branch,
        totalFiles: files.length,
        fileTypes,
      };

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(stats, null, 2),
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `Error getting repository stats: ${error}`,
          },
        ],
        isError: true,
      };
    }
  });

  // Helper function to recursively list all files in a repository
  async function listAllFiles(
    repo: string,
    branch: string = 'main',
    path: string = ''
  ): Promise<
    Array<{
      name: string;
      path: string;
      type: string;
    }>
  > {
    const items = await github.listFiles(repo, path, branch);
    let allFiles: Array<{ name: string; path: string; type: string }> = [];

    for (const item of items) {
      if (item.type === 'dir') {
        // Recursively list files in subdirectories
        const subFiles = await listAllFiles(repo, branch, item.path);
        allFiles = [...allFiles, ...subFiles];
      } else {
        allFiles.push(item);
      }
    }

    return allFiles;
  }

  // Start the server with stdio transport
  const transport = new StdioServerTransport();
  await server.connect(transport);

  console.log('GitHub MCP Server is running...');
}

main().catch((error) => {
  console.error('Failed to start the server:', error);
  process.exit(1);
});
